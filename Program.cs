using System;
using System.Linq;
using WildberriesRepricer.Data;
using WildberriesRepricer.Models;
using WildberriesRepricer.Services;

namespace WildberriesRepricer
{
    class Program
    {
        static DatabaseContext context = null!;
        static ProductRepository productRepo = null!;
        static CompetitorRepository competitorRepo = null!;
        static RepricingService repricingService = null!;

        static void Main(string[] args)
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            
            context = new DatabaseContext();
            context.InitializeDatabase();

            var sampleDataService = new SampleDataService(context);
            sampleDataService.InitializeSampleData();

            productRepo = new ProductRepository(context);
            competitorRepo = new CompetitorRepository(context);
            repricingService = new RepricingService(context);

            ShowWelcome();
            RunMainMenu();

            context.Dispose();
        }

        static void ShowWelcome()
        {
            Console.Clear();
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë   WILDBERRIES –†–ï–ü–†–ê–ô–°–ï–† - –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¶–ï–ù–ê–ú–ò        ‚ïë");
            Console.WriteLine("‚ïë          –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∫–æ—Ñ–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ              ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
        }

        static void RunMainMenu()
        {
            bool exit = false;
            
            while (!exit)
            {
                Console.WriteLine("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                Console.WriteLine("1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
                Console.WriteLine("2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤");
                Console.WriteLine("3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É");
                Console.WriteLine("4. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –ü–æ–Ω–∏–∑–∏—Ç—å –Ω–∞ 5%");
                Console.WriteLine("5. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –ü–æ–Ω–∏–∑–∏—Ç—å –Ω–∞ —Å—É–º–º—É");
                Console.WriteLine("6. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ä–∂—É 25%");
                Console.WriteLine("7. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –ü—Ä–µ–º–∏—É–º —Ü–µ–Ω–∞ +10%");
                Console.WriteLine("8. –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ü–µ–Ω");
                Console.WriteLine("9. –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω");
                Console.WriteLine("0. –í—ã—Ö–æ–¥");
                Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
                Console.Write("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-9): ");

                var choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        DisplayProductCatalog();
                        break;
                    case "2":
                        DisplayCompetitorAnalysis();
                        break;
                    case "3":
                        ApplyMatchLowestStrategy();
                        break;
                    case "4":
                        ApplyUndercutByPercentStrategy();
                        break;
                    case "5":
                        ApplyUndercutByAmountStrategy();
                        break;
                    case "6":
                        ApplyMaintainMarginStrategy();
                        break;
                    case "7":
                        ApplyPremiumPricingStrategy();
                        break;
                    case "8":
                        DisplayPricingAnalytics();
                        break;
                    case "9":
                        DisplayPriceHistory();
                        break;
                    case "0":
                        exit = true;
                        Console.WriteLine("\n‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                        break;
                    default:
                        Console.WriteLine("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        break;
                }

                if (!exit)
                {
                    Console.Write("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                    Console.ReadLine();
                }
            }
        }

        static void DisplayProductCatalog()
        {
            Console.WriteLine("\nüì¶ –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í\n");
            
            var products = productRepo.GetAll();
            Console.WriteLine($"{"ID",-5} {"SKU",-18} {"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",-35} {"–¶–µ–Ω–∞",-12} {"–ú–∞—Ä–∂–∞",-10} {"–û—Å—Ç–∞—Ç–æ–∫"}");
            Console.WriteLine(new string('-', 95));

            foreach (var product in products)
            {
                var margin = product.CalculateMargin();
                Console.WriteLine($"{product.Id,-5} {product.SKU,-18} {TruncateString(product.Name, 35),-35} " +
                                $"{product.CurrentPrice,10:N2}‚ÇΩ {margin,8:N1}% {product.StockQuantity,8}");
            }
        }

        static void DisplayCompetitorAnalysis()
        {
            Console.WriteLine("\nüè™ –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–£–†–ï–ù–¢–û–í\n");
            var products = productRepo.GetAll();
            
            foreach (var product in products)
            {
                var competitors = competitorRepo.GetByProductId(product.Id);
                if (!competitors.Any()) continue;
                
                var lowestPrice = competitors.Min(c => c.Price);
                var avgPrice = competitors.Average(c => c.Price);
                
                Console.WriteLine($"\n{product.Name}");
                Console.WriteLine($"  –ù–∞—à–∞ —Ü–µ–Ω–∞: {product.CurrentPrice:N2}‚ÇΩ");
                Console.WriteLine($"  –ú–∏–Ω. —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {lowestPrice:N2}‚ÇΩ");
                Console.WriteLine($"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {avgPrice:N2}‚ÇΩ");
                Console.WriteLine($"  –†–∞–∑–Ω–∏—Ü–∞ —Å –º–∏–Ω.: {(product.CurrentPrice - lowestPrice):N2}‚ÇΩ ({((product.CurrentPrice - lowestPrice) / lowestPrice * 100):N1}%)");
                Console.WriteLine($"  –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {competitors.Count}");
            }
        }

        static void ApplyMatchLowestStrategy()
        {
            Console.WriteLine("\nüéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ä–∞–≤–Ω–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n");
            
            var config = new RepricingConfig
            {
                Strategy = RepricingStrategy.MatchLowest
            };

            var results = repricingService.ExecuteBulkRepricing(config);
            DisplayBulkResults(results);
        }

        static void ApplyUndercutByPercentStrategy()
        {
            Console.WriteLine("\nüìâ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ 5% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞\n");
            
            var config = new RepricingConfig
            {
                Strategy = RepricingStrategy.UndercutByPercent,
                UndercutPercent = 5.0m
            };

            var results = repricingService.ExecuteBulkRepricing(config);
            DisplayBulkResults(results);
        }

        static void ApplyUndercutByAmountStrategy()
        {
            Console.WriteLine("\nüíµ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ 50‚ÇΩ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞\n");
            
            var config = new RepricingConfig
            {
                Strategy = RepricingStrategy.UndercutByAmount,
                UndercutAmount = 50.0m
            };

            var results = repricingService.ExecuteBulkRepricing(config);
            DisplayBulkResults(results);
        }

        static void ApplyMaintainMarginStrategy()
        {
            Console.WriteLine("\nüí∞ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–∏ 25%\n");
            
            var config = new RepricingConfig
            {
                Strategy = RepricingStrategy.MaintainMargin,
                MinMarginPercent = 25.0m
            };

            var results = repricingService.ExecuteBulkRepricing(config);
            DisplayBulkResults(results);
        }

        static void ApplyPremiumPricingStrategy()
        {
            Console.WriteLine("\n‚ú® –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü—Ä–µ–º–∏—É–º —Ü–µ–Ω–∞ +10% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞\n");
            
            var config = new RepricingConfig
            {
                Strategy = RepricingStrategy.PremiumPricing,
                PremiumPercent = 10.0m
            };

            var results = repricingService.ExecuteBulkRepricing(config);
            DisplayBulkResults(results);
        }

        static void DisplayBulkResults(System.Collections.Generic.List<RepricingResult> results)
        {
            int changed = 0;
            int unchanged = 0;

            foreach (var result in results)
            {
                Console.WriteLine($"–¢–æ–≤–∞—Ä: {result.ProductName}");
                Console.WriteLine($"  –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {result.OldPrice:N2}‚ÇΩ");
                Console.WriteLine($"  –ù–æ–≤–∞—è —Ü–µ–Ω–∞:  {result.NewPrice:N2}‚ÇΩ");
                
                if (result.PriceChanged)
                {
                    Console.WriteLine($"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ:   {result.GetPriceChange():N2}‚ÇΩ ({result.GetPriceChangePercent():N1}%)");
                    Console.WriteLine($"  –°—Ç–∞—Ç—É—Å: ‚úì –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
                    changed++;
                }
                else
                {
                    Console.WriteLine($"  –°—Ç–∞—Ç—É—Å: ‚óã –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π");
                    unchanged++;
                }
                
                Console.WriteLine($"  {result.Message}\n");
            }

            Console.WriteLine($"\nüìä –ò—Ç–æ–≥–æ: –û–±–Ω–æ–≤–ª–µ–Ω–æ {changed}, –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π {unchanged}");
        }

        static void DisplayPricingAnalytics()
        {
            Console.WriteLine("\n" + new string('‚ïê', 70));
            Console.WriteLine("üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –¶–ï–ù");
            Console.WriteLine(new string('‚ïê', 70) + "\n");

            var products = productRepo.GetAll();
            
            var totalRevenue = products.Sum(p => p.CurrentPrice * p.StockQuantity);
            var totalCost = products.Sum(p => p.CostPrice * p.StockQuantity);
            var totalProfit = totalRevenue - totalCost;
            var avgMargin = products.Average(p => p.CalculateMargin());

            Console.WriteLine($"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:         {products.Count}");
            Console.WriteLine($"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:       {totalRevenue:N2}‚ÇΩ");
            Console.WriteLine($"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:         {totalCost:N2}‚ÇΩ");
            Console.WriteLine($"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {totalProfit:N2}‚ÇΩ");
            Console.WriteLine($"–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞:         {avgMargin:N1}%");
            
            Console.WriteLine($"\n–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:          {products.Min(p => p.CurrentPrice):N2}‚ÇΩ - {products.Max(p => p.CurrentPrice):N2}‚ÇΩ");
            Console.WriteLine($"–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:         {products.Sum(p => p.StockQuantity)} –µ–¥–∏–Ω–∏—Ü");
        }

        static void DisplayPriceHistory()
        {
            Console.WriteLine("\nüìú –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù\n");
            
            var historyRepo = new PriceHistoryRepository(context);
            var history = historyRepo.GetAll().OrderByDescending(h => h.ChangeDate).Take(20).ToList();

            if (!history.Any())
            {
                Console.WriteLine("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞.");
                return;
            }

            Console.WriteLine($"{"–î–∞—Ç–∞/–í—Ä–µ–º—è",-20} {"–¢–æ–≤–∞—Ä",-30} {"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞",-12} {"–ù–æ–≤–∞—è —Ü–µ–Ω–∞",-12} {"–°—Ç—Ä–∞—Ç–µ–≥–∏—è"}");
            Console.WriteLine(new string('-', 100));

            foreach (var entry in history)
            {
                var product = productRepo.GetById(entry.ProductId);
                var productName = product != null ? (TruncateString(product.Name, 30) ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                
                Console.WriteLine($"{entry.ChangeDate:yyyy-MM-dd HH:mm:ss}  {productName,-30} " +
                                $"{entry.OldPrice,10:N2}‚ÇΩ  {entry.NewPrice,10:N2}‚ÇΩ  {entry.Strategy}");
            }

            Console.WriteLine($"\n–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {history.Count} –∑–∞–ø–∏—Å–µ–π.");
        }

        static string TruncateString(string str, int maxLength)
        {
            if (string.IsNullOrEmpty(str)) return str;
            return str.Length <= maxLength ? str : str.Substring(0, maxLength - 3) + "...";
        }
    }
}
